/*
 * IXOPAY Payment Platform
 * IXOPAY Payment Platform
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@ixopay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ixopay.client.core.api;

import com.ixopay.client.signing.HttpHeaders;
import com.ixopay.client.signing.ApiRequestAuthenticator;
import com.ixopay.client.signing.ApiRequestSigner;
import com.ixopay.client.signing.model.ApiRequestHeadersAuthentication;
import com.ixopay.client.signing.model.ApiRequestHeadersSignature;
import com.ixopay.client.signing.model.ApiUser;
import com.ixopay.client.signing.model.HttpRequestInfo;
import com.ixopay.client.core.client.ApiClient;
import com.ixopay.client.core.client.ApiException;
import com.ixopay.client.core.client.ApiResponse;
import com.ixopay.client.core.client.Pair;

import com.ixopay.client.core.model.MaybeStatusResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

import javax.annotation.Nullable;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class StatusApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final ApiUser memberVarApiUser;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public StatusApi(ApiUser apiUser) {
    this(new ApiClient(apiUser));
  }

  public StatusApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarApiUser = apiClient.getApiUser();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Retrieve status of a transaction
   * 
   * @param apiKey API Key of Connector (required)
   * @param merchantTransactionId ID of merchant transaction (required)
   * @return MaybeStatusResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeStatusResponse transactionStatusByMerchantTransactionId(String apiKey, String merchantTransactionId) throws ApiException {
    return  transactionStatusByMerchantTransactionId(null, apiKey, merchantTransactionId);
  }

  /**
   * Retrieve status of a transaction
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param merchantTransactionId ID of merchant transaction (required)
   * @return MaybeStatusResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeStatusResponse transactionStatusByMerchantTransactionId(@Nullable String sharedSecret, String apiKey, String merchantTransactionId) throws ApiException {
    ApiResponse<MaybeStatusResponse> localVarResponse = transactionStatusByMerchantTransactionIdWithHttpInfo(sharedSecret, apiKey, merchantTransactionId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve status of a transaction
   * 
   * @param apiKey API Key of Connector (required)
   * @param merchantTransactionId ID of merchant transaction (required)
   * @return ApiResponse&lt;MaybeStatusResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeStatusResponse> transactionStatusByMerchantTransactionIdWithHttpInfo(String apiKey, String merchantTransactionId) throws ApiException {
    return transactionStatusByMerchantTransactionIdWithHttpInfo(null, apiKey, merchantTransactionId);
  }

  /**
   * Retrieve status of a transaction
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param merchantTransactionId ID of merchant transaction (required)
   * @return ApiResponse&lt;MaybeStatusResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeStatusResponse> transactionStatusByMerchantTransactionIdWithHttpInfo(@Nullable String sharedSecret, String apiKey, String merchantTransactionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = transactionStatusByMerchantTransactionIdRequestBuilder(sharedSecret, apiKey, merchantTransactionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        return new ApiResponse<MaybeStatusResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MaybeStatusResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder transactionStatusByMerchantTransactionIdRequestBuilder(@Nullable String sharedSecret, String apiKey, String merchantTransactionId) throws ApiException {
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      throw new ApiException(400, "Missing the required parameter 'apiKey' when calling transactionStatusByMerchantTransactionId");
    }
    // verify the required parameter 'merchantTransactionId' is set
    if (merchantTransactionId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantTransactionId' when calling transactionStatusByMerchantTransactionId");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/status/{apiKey}/getByMerchantTransactionId/{merchantTransactionId}"
        .replace("{apiKey}", ApiClient.urlEncode(apiKey.toString()))
        .replace("{merchantTransactionId}", ApiClient.urlEncode(merchantTransactionId.toString()));

    ApiRequestHeadersAuthentication authentication = ApiRequestAuthenticator.authenticate(memberVarApiUser);
    localVarRequestBuilder.header(HttpHeaders.authorization(), authentication.getAuthorizationHeader());

    URI localVarUri = URI.create(memberVarBaseUri + localVarPath);
    localVarRequestBuilder.uri(localVarUri);

    if (sharedSecret != null) {
      localVarRequestBuilder.header("Content-Type", "application/json");
    }
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("User-Agent", "ixopay-java-sdk 3.0.0");

    byte[] localVarSignatureBody = new byte[0];
    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }

    HttpRequestInfo localVarRequestInfo = ApiRequestSigner.requestInfo()
      .withUri(localVarUri)
      .withMethod("GET")
      .withContentTypeHeader("application/json")
      .withBody(localVarSignatureBody)
      .build();
    localVarRequestBuilder.header(HttpHeaders.date(), localVarRequestInfo.getNow());
    if(sharedSecret != null && localVarSignatureBody != null) {
      ApiRequestHeadersSignature signature = ApiRequestSigner.sign(sharedSecret, localVarRequestInfo);

      localVarRequestBuilder.header(HttpHeaders.xSignature(), signature.getXSignatureHeader());
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve status of a transaction
   * 
   * @param apiKey API Key of Connector (required)
   * @param uuid UUID of transaction (required)
   * @return MaybeStatusResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeStatusResponse transactionStatusByUuid(String apiKey, String uuid) throws ApiException {
    return  transactionStatusByUuid(null, apiKey, uuid);
  }

  /**
   * Retrieve status of a transaction
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param uuid UUID of transaction (required)
   * @return MaybeStatusResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeStatusResponse transactionStatusByUuid(@Nullable String sharedSecret, String apiKey, String uuid) throws ApiException {
    ApiResponse<MaybeStatusResponse> localVarResponse = transactionStatusByUuidWithHttpInfo(sharedSecret, apiKey, uuid);
    return localVarResponse.getData();
  }

  /**
   * Retrieve status of a transaction
   * 
   * @param apiKey API Key of Connector (required)
   * @param uuid UUID of transaction (required)
   * @return ApiResponse&lt;MaybeStatusResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeStatusResponse> transactionStatusByUuidWithHttpInfo(String apiKey, String uuid) throws ApiException {
    return transactionStatusByUuidWithHttpInfo(null, apiKey, uuid);
  }

  /**
   * Retrieve status of a transaction
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param uuid UUID of transaction (required)
   * @return ApiResponse&lt;MaybeStatusResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeStatusResponse> transactionStatusByUuidWithHttpInfo(@Nullable String sharedSecret, String apiKey, String uuid) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = transactionStatusByUuidRequestBuilder(sharedSecret, apiKey, uuid);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        return new ApiResponse<MaybeStatusResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MaybeStatusResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder transactionStatusByUuidRequestBuilder(@Nullable String sharedSecret, String apiKey, String uuid) throws ApiException {
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      throw new ApiException(400, "Missing the required parameter 'apiKey' when calling transactionStatusByUuid");
    }
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      throw new ApiException(400, "Missing the required parameter 'uuid' when calling transactionStatusByUuid");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/status/{apiKey}/getByUuid/{uuid}"
        .replace("{apiKey}", ApiClient.urlEncode(apiKey.toString()))
        .replace("{uuid}", ApiClient.urlEncode(uuid.toString()));

    ApiRequestHeadersAuthentication authentication = ApiRequestAuthenticator.authenticate(memberVarApiUser);
    localVarRequestBuilder.header(HttpHeaders.authorization(), authentication.getAuthorizationHeader());

    URI localVarUri = URI.create(memberVarBaseUri + localVarPath);
    localVarRequestBuilder.uri(localVarUri);

    if (sharedSecret != null) {
      localVarRequestBuilder.header("Content-Type", "application/json");
    }
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("User-Agent", "ixopay-java-sdk 3.0.0");

    byte[] localVarSignatureBody = new byte[0];
    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }

    HttpRequestInfo localVarRequestInfo = ApiRequestSigner.requestInfo()
      .withUri(localVarUri)
      .withMethod("GET")
      .withContentTypeHeader("application/json")
      .withBody(localVarSignatureBody)
      .build();
    localVarRequestBuilder.header(HttpHeaders.date(), localVarRequestInfo.getNow());
    if(sharedSecret != null && localVarSignatureBody != null) {
      ApiRequestHeadersSignature signature = ApiRequestSigner.sign(sharedSecret, localVarRequestInfo);

      localVarRequestBuilder.header(HttpHeaders.xSignature(), signature.getXSignatureHeader());
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
