/*
 * IXOPAY Payment Platform
 * IXOPAY Payment Platform
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@ixopay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ixopay.client.core.api;

import com.ixopay.client.signing.HttpHeaders;
import com.ixopay.client.signing.ApiRequestAuthenticator;
import com.ixopay.client.signing.ApiRequestSigner;
import com.ixopay.client.signing.model.ApiRequestHeadersAuthentication;
import com.ixopay.client.signing.model.ApiRequestHeadersSignature;
import com.ixopay.client.signing.model.ApiUser;
import com.ixopay.client.signing.model.HttpRequestInfo;
import com.ixopay.client.core.client.ApiClient;
import com.ixopay.client.core.client.ApiException;
import com.ixopay.client.core.client.ApiResponse;
import com.ixopay.client.core.client.Pair;

import com.ixopay.client.core.model.Capture;
import com.ixopay.client.core.model.Debit;
import com.ixopay.client.core.model.Deregister;
import com.ixopay.client.core.model.IncrementalAuthorization;
import com.ixopay.client.core.model.MaybeTransactionResponse;
import com.ixopay.client.core.model.ModelVoid;
import com.ixopay.client.core.model.Payout;
import com.ixopay.client.core.model.Preauthorize;
import com.ixopay.client.core.model.Refund;
import com.ixopay.client.core.model.Register;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

import javax.annotation.Nullable;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegenWithComposedSchema")
public class TransactionApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final ApiUser memberVarApiUser;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public TransactionApi(ApiUser apiUser) {
    this(new ApiClient(apiUser));
  }

  public TransactionApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarApiUser = apiClient.getApiUser();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Process a capture: completes a payment previously authorized through Preauthorize
   * 
   * @param apiKey API Key of Connector (required)
   * @param capture Data which is required to process a capture (required)
   * @return MaybeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeTransactionResponse processCapture(String apiKey, Capture capture) throws ApiException {
    return  processCapture(null, apiKey, capture);
  }

  /**
   * Process a capture: completes a payment previously authorized through Preauthorize
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param capture Data which is required to process a capture (required)
   * @return MaybeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeTransactionResponse processCapture(@Nullable String sharedSecret, String apiKey, Capture capture) throws ApiException {
    ApiResponse<MaybeTransactionResponse> localVarResponse = processCaptureWithHttpInfo(sharedSecret, apiKey, capture);
    return localVarResponse.getData();
  }

  /**
   * Process a capture: completes a payment previously authorized through Preauthorize
   * 
   * @param apiKey API Key of Connector (required)
   * @param capture Data which is required to process a capture (required)
   * @return ApiResponse&lt;MaybeTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeTransactionResponse> processCaptureWithHttpInfo(String apiKey, Capture capture) throws ApiException {
    return processCaptureWithHttpInfo(null, apiKey, capture);
  }

  /**
   * Process a capture: completes a payment previously authorized through Preauthorize
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param capture Data which is required to process a capture (required)
   * @return ApiResponse&lt;MaybeTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeTransactionResponse> processCaptureWithHttpInfo(@Nullable String sharedSecret, String apiKey, Capture capture) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = processCaptureRequestBuilder(sharedSecret, apiKey, capture);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        return new ApiResponse<MaybeTransactionResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MaybeTransactionResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder processCaptureRequestBuilder(@Nullable String sharedSecret, String apiKey, Capture capture) throws ApiException {
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      throw new ApiException(400, "Missing the required parameter 'apiKey' when calling processCapture");
    }
    // verify the required parameter 'capture' is set
    if (capture == null) {
      throw new ApiException(400, "Missing the required parameter 'capture' when calling processCapture");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/transaction/{apiKey}/capture"
        .replace("{apiKey}", ApiClient.urlEncode(apiKey.toString()));

    ApiRequestHeadersAuthentication authentication = ApiRequestAuthenticator.authenticate(memberVarApiUser);
    localVarRequestBuilder.header(HttpHeaders.authorization(), authentication.getAuthorizationHeader());

    URI localVarUri = URI.create(memberVarBaseUri + localVarPath);
    localVarRequestBuilder.uri(localVarUri);

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("User-Agent", "ixopay-java-sdk 3.0.0");

    byte[] localVarSignatureBody;
    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(capture);
      localVarSignatureBody = localVarPostBody;
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }

    HttpRequestInfo localVarRequestInfo = ApiRequestSigner.requestInfo()
      .withUri(localVarUri)
      .withMethod("POST")
      .withContentTypeHeader("application/json")
      .withBody(localVarSignatureBody)
      .build();
    localVarRequestBuilder.header(HttpHeaders.date(), localVarRequestInfo.getNow());
    if(sharedSecret != null && localVarSignatureBody != null) {
      ApiRequestHeadersSignature signature = ApiRequestSigner.sign(sharedSecret, localVarRequestInfo);

      localVarRequestBuilder.header(HttpHeaders.xSignature(), signature.getXSignatureHeader());
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Process a debit
   * 
   * @param apiKey API Key of Connector (required)
   * @param debit Data which is required to process a debit (required)
   * @return MaybeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeTransactionResponse processDebit(String apiKey, Debit debit) throws ApiException {
    return  processDebit(null, apiKey, debit);
  }

  /**
   * Process a debit
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param debit Data which is required to process a debit (required)
   * @return MaybeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeTransactionResponse processDebit(@Nullable String sharedSecret, String apiKey, Debit debit) throws ApiException {
    ApiResponse<MaybeTransactionResponse> localVarResponse = processDebitWithHttpInfo(sharedSecret, apiKey, debit);
    return localVarResponse.getData();
  }

  /**
   * Process a debit
   * 
   * @param apiKey API Key of Connector (required)
   * @param debit Data which is required to process a debit (required)
   * @return ApiResponse&lt;MaybeTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeTransactionResponse> processDebitWithHttpInfo(String apiKey, Debit debit) throws ApiException {
    return processDebitWithHttpInfo(null, apiKey, debit);
  }

  /**
   * Process a debit
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param debit Data which is required to process a debit (required)
   * @return ApiResponse&lt;MaybeTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeTransactionResponse> processDebitWithHttpInfo(@Nullable String sharedSecret, String apiKey, Debit debit) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = processDebitRequestBuilder(sharedSecret, apiKey, debit);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        return new ApiResponse<MaybeTransactionResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MaybeTransactionResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder processDebitRequestBuilder(@Nullable String sharedSecret, String apiKey, Debit debit) throws ApiException {
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      throw new ApiException(400, "Missing the required parameter 'apiKey' when calling processDebit");
    }
    // verify the required parameter 'debit' is set
    if (debit == null) {
      throw new ApiException(400, "Missing the required parameter 'debit' when calling processDebit");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/transaction/{apiKey}/debit"
        .replace("{apiKey}", ApiClient.urlEncode(apiKey.toString()));

    ApiRequestHeadersAuthentication authentication = ApiRequestAuthenticator.authenticate(memberVarApiUser);
    localVarRequestBuilder.header(HttpHeaders.authorization(), authentication.getAuthorizationHeader());

    URI localVarUri = URI.create(memberVarBaseUri + localVarPath);
    localVarRequestBuilder.uri(localVarUri);

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("User-Agent", "ixopay-java-sdk 3.0.0");

    byte[] localVarSignatureBody;
    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(debit);
      localVarSignatureBody = localVarPostBody;
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }

    HttpRequestInfo localVarRequestInfo = ApiRequestSigner.requestInfo()
      .withUri(localVarUri)
      .withMethod("POST")
      .withContentTypeHeader("application/json")
      .withBody(localVarSignatureBody)
      .build();
    localVarRequestBuilder.header(HttpHeaders.date(), localVarRequestInfo.getNow());
    if(sharedSecret != null && localVarSignatureBody != null) {
      ApiRequestHeadersSignature signature = ApiRequestSigner.sign(sharedSecret, localVarRequestInfo);

      localVarRequestBuilder.header(HttpHeaders.xSignature(), signature.getXSignatureHeader());
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Process a deregister: deletes a previously registered payment instrument
   * 
   * @param apiKey API Key of Connector (required)
   * @param deregister Data which is required to process a deregister (required)
   * @return MaybeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeTransactionResponse processDeregister(String apiKey, Deregister deregister) throws ApiException {
    return  processDeregister(null, apiKey, deregister);
  }

  /**
   * Process a deregister: deletes a previously registered payment instrument
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param deregister Data which is required to process a deregister (required)
   * @return MaybeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeTransactionResponse processDeregister(@Nullable String sharedSecret, String apiKey, Deregister deregister) throws ApiException {
    ApiResponse<MaybeTransactionResponse> localVarResponse = processDeregisterWithHttpInfo(sharedSecret, apiKey, deregister);
    return localVarResponse.getData();
  }

  /**
   * Process a deregister: deletes a previously registered payment instrument
   * 
   * @param apiKey API Key of Connector (required)
   * @param deregister Data which is required to process a deregister (required)
   * @return ApiResponse&lt;MaybeTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeTransactionResponse> processDeregisterWithHttpInfo(String apiKey, Deregister deregister) throws ApiException {
    return processDeregisterWithHttpInfo(null, apiKey, deregister);
  }

  /**
   * Process a deregister: deletes a previously registered payment instrument
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param deregister Data which is required to process a deregister (required)
   * @return ApiResponse&lt;MaybeTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeTransactionResponse> processDeregisterWithHttpInfo(@Nullable String sharedSecret, String apiKey, Deregister deregister) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = processDeregisterRequestBuilder(sharedSecret, apiKey, deregister);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        return new ApiResponse<MaybeTransactionResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MaybeTransactionResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder processDeregisterRequestBuilder(@Nullable String sharedSecret, String apiKey, Deregister deregister) throws ApiException {
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      throw new ApiException(400, "Missing the required parameter 'apiKey' when calling processDeregister");
    }
    // verify the required parameter 'deregister' is set
    if (deregister == null) {
      throw new ApiException(400, "Missing the required parameter 'deregister' when calling processDeregister");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/transaction/{apiKey}/deregister"
        .replace("{apiKey}", ApiClient.urlEncode(apiKey.toString()));

    ApiRequestHeadersAuthentication authentication = ApiRequestAuthenticator.authenticate(memberVarApiUser);
    localVarRequestBuilder.header(HttpHeaders.authorization(), authentication.getAuthorizationHeader());

    URI localVarUri = URI.create(memberVarBaseUri + localVarPath);
    localVarRequestBuilder.uri(localVarUri);

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("User-Agent", "ixopay-java-sdk 3.0.0");

    byte[] localVarSignatureBody;
    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(deregister);
      localVarSignatureBody = localVarPostBody;
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }

    HttpRequestInfo localVarRequestInfo = ApiRequestSigner.requestInfo()
      .withUri(localVarUri)
      .withMethod("POST")
      .withContentTypeHeader("application/json")
      .withBody(localVarSignatureBody)
      .build();
    localVarRequestBuilder.header(HttpHeaders.date(), localVarRequestInfo.getNow());
    if(sharedSecret != null && localVarSignatureBody != null) {
      ApiRequestHeadersSignature signature = ApiRequestSigner.sign(sharedSecret, localVarRequestInfo);

      localVarRequestBuilder.header(HttpHeaders.xSignature(), signature.getXSignatureHeader());
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Increases or prolongs the authorization on a customer&#39;s payment instrument (made with Preauthorize before)
   * 
   * @param apiKey API Key of Connector (required)
   * @param incrementalAuthorization Data which is required to process a incremental auth (required)
   * @return MaybeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeTransactionResponse processIncrementalAuthorization(String apiKey, IncrementalAuthorization incrementalAuthorization) throws ApiException {
    return  processIncrementalAuthorization(null, apiKey, incrementalAuthorization);
  }

  /**
   * Increases or prolongs the authorization on a customer&#39;s payment instrument (made with Preauthorize before)
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param incrementalAuthorization Data which is required to process a incremental auth (required)
   * @return MaybeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeTransactionResponse processIncrementalAuthorization(@Nullable String sharedSecret, String apiKey, IncrementalAuthorization incrementalAuthorization) throws ApiException {
    ApiResponse<MaybeTransactionResponse> localVarResponse = processIncrementalAuthorizationWithHttpInfo(sharedSecret, apiKey, incrementalAuthorization);
    return localVarResponse.getData();
  }

  /**
   * Increases or prolongs the authorization on a customer&#39;s payment instrument (made with Preauthorize before)
   * 
   * @param apiKey API Key of Connector (required)
   * @param incrementalAuthorization Data which is required to process a incremental auth (required)
   * @return ApiResponse&lt;MaybeTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeTransactionResponse> processIncrementalAuthorizationWithHttpInfo(String apiKey, IncrementalAuthorization incrementalAuthorization) throws ApiException {
    return processIncrementalAuthorizationWithHttpInfo(null, apiKey, incrementalAuthorization);
  }

  /**
   * Increases or prolongs the authorization on a customer&#39;s payment instrument (made with Preauthorize before)
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param incrementalAuthorization Data which is required to process a incremental auth (required)
   * @return ApiResponse&lt;MaybeTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeTransactionResponse> processIncrementalAuthorizationWithHttpInfo(@Nullable String sharedSecret, String apiKey, IncrementalAuthorization incrementalAuthorization) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = processIncrementalAuthorizationRequestBuilder(sharedSecret, apiKey, incrementalAuthorization);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        return new ApiResponse<MaybeTransactionResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MaybeTransactionResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder processIncrementalAuthorizationRequestBuilder(@Nullable String sharedSecret, String apiKey, IncrementalAuthorization incrementalAuthorization) throws ApiException {
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      throw new ApiException(400, "Missing the required parameter 'apiKey' when calling processIncrementalAuthorization");
    }
    // verify the required parameter 'incrementalAuthorization' is set
    if (incrementalAuthorization == null) {
      throw new ApiException(400, "Missing the required parameter 'incrementalAuthorization' when calling processIncrementalAuthorization");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/transaction/{apiKey}/incrementalAuthorization"
        .replace("{apiKey}", ApiClient.urlEncode(apiKey.toString()));

    ApiRequestHeadersAuthentication authentication = ApiRequestAuthenticator.authenticate(memberVarApiUser);
    localVarRequestBuilder.header(HttpHeaders.authorization(), authentication.getAuthorizationHeader());

    URI localVarUri = URI.create(memberVarBaseUri + localVarPath);
    localVarRequestBuilder.uri(localVarUri);

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("User-Agent", "ixopay-java-sdk 3.0.0");

    byte[] localVarSignatureBody;
    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(incrementalAuthorization);
      localVarSignatureBody = localVarPostBody;
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }

    HttpRequestInfo localVarRequestInfo = ApiRequestSigner.requestInfo()
      .withUri(localVarUri)
      .withMethod("POST")
      .withContentTypeHeader("application/json")
      .withBody(localVarSignatureBody)
      .build();
    localVarRequestBuilder.header(HttpHeaders.date(), localVarRequestInfo.getNow());
    if(sharedSecret != null && localVarSignatureBody != null) {
      ApiRequestHeadersSignature signature = ApiRequestSigner.sign(sharedSecret, localVarRequestInfo);

      localVarRequestBuilder.header(HttpHeaders.xSignature(), signature.getXSignatureHeader());
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Process a payout
   * 
   * @param apiKey API Key of Connector (required)
   * @param payout Data which is required to process a payout (required)
   * @return MaybeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeTransactionResponse processPayout(String apiKey, Payout payout) throws ApiException {
    return  processPayout(null, apiKey, payout);
  }

  /**
   * Process a payout
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param payout Data which is required to process a payout (required)
   * @return MaybeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeTransactionResponse processPayout(@Nullable String sharedSecret, String apiKey, Payout payout) throws ApiException {
    ApiResponse<MaybeTransactionResponse> localVarResponse = processPayoutWithHttpInfo(sharedSecret, apiKey, payout);
    return localVarResponse.getData();
  }

  /**
   * Process a payout
   * 
   * @param apiKey API Key of Connector (required)
   * @param payout Data which is required to process a payout (required)
   * @return ApiResponse&lt;MaybeTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeTransactionResponse> processPayoutWithHttpInfo(String apiKey, Payout payout) throws ApiException {
    return processPayoutWithHttpInfo(null, apiKey, payout);
  }

  /**
   * Process a payout
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param payout Data which is required to process a payout (required)
   * @return ApiResponse&lt;MaybeTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeTransactionResponse> processPayoutWithHttpInfo(@Nullable String sharedSecret, String apiKey, Payout payout) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = processPayoutRequestBuilder(sharedSecret, apiKey, payout);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        return new ApiResponse<MaybeTransactionResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MaybeTransactionResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder processPayoutRequestBuilder(@Nullable String sharedSecret, String apiKey, Payout payout) throws ApiException {
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      throw new ApiException(400, "Missing the required parameter 'apiKey' when calling processPayout");
    }
    // verify the required parameter 'payout' is set
    if (payout == null) {
      throw new ApiException(400, "Missing the required parameter 'payout' when calling processPayout");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/transaction/{apiKey}/payout"
        .replace("{apiKey}", ApiClient.urlEncode(apiKey.toString()));

    ApiRequestHeadersAuthentication authentication = ApiRequestAuthenticator.authenticate(memberVarApiUser);
    localVarRequestBuilder.header(HttpHeaders.authorization(), authentication.getAuthorizationHeader());

    URI localVarUri = URI.create(memberVarBaseUri + localVarPath);
    localVarRequestBuilder.uri(localVarUri);

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("User-Agent", "ixopay-java-sdk 3.0.0");

    byte[] localVarSignatureBody;
    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(payout);
      localVarSignatureBody = localVarPostBody;
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }

    HttpRequestInfo localVarRequestInfo = ApiRequestSigner.requestInfo()
      .withUri(localVarUri)
      .withMethod("POST")
      .withContentTypeHeader("application/json")
      .withBody(localVarSignatureBody)
      .build();
    localVarRequestBuilder.header(HttpHeaders.date(), localVarRequestInfo.getNow());
    if(sharedSecret != null && localVarSignatureBody != null) {
      ApiRequestHeadersSignature signature = ApiRequestSigner.sign(sharedSecret, localVarRequestInfo);

      localVarRequestBuilder.header(HttpHeaders.xSignature(), signature.getXSignatureHeader());
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Process a preauthorize: reserves the payment amount on the customer&#39;s payment instrument
   * 
   * @param apiKey API Key of Connector (required)
   * @param preauthorize Data which is required to process a preauthorize (required)
   * @return MaybeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeTransactionResponse processPreauthorize(String apiKey, Preauthorize preauthorize) throws ApiException {
    return  processPreauthorize(null, apiKey, preauthorize);
  }

  /**
   * Process a preauthorize: reserves the payment amount on the customer&#39;s payment instrument
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param preauthorize Data which is required to process a preauthorize (required)
   * @return MaybeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeTransactionResponse processPreauthorize(@Nullable String sharedSecret, String apiKey, Preauthorize preauthorize) throws ApiException {
    ApiResponse<MaybeTransactionResponse> localVarResponse = processPreauthorizeWithHttpInfo(sharedSecret, apiKey, preauthorize);
    return localVarResponse.getData();
  }

  /**
   * Process a preauthorize: reserves the payment amount on the customer&#39;s payment instrument
   * 
   * @param apiKey API Key of Connector (required)
   * @param preauthorize Data which is required to process a preauthorize (required)
   * @return ApiResponse&lt;MaybeTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeTransactionResponse> processPreauthorizeWithHttpInfo(String apiKey, Preauthorize preauthorize) throws ApiException {
    return processPreauthorizeWithHttpInfo(null, apiKey, preauthorize);
  }

  /**
   * Process a preauthorize: reserves the payment amount on the customer&#39;s payment instrument
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param preauthorize Data which is required to process a preauthorize (required)
   * @return ApiResponse&lt;MaybeTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeTransactionResponse> processPreauthorizeWithHttpInfo(@Nullable String sharedSecret, String apiKey, Preauthorize preauthorize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = processPreauthorizeRequestBuilder(sharedSecret, apiKey, preauthorize);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        return new ApiResponse<MaybeTransactionResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MaybeTransactionResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder processPreauthorizeRequestBuilder(@Nullable String sharedSecret, String apiKey, Preauthorize preauthorize) throws ApiException {
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      throw new ApiException(400, "Missing the required parameter 'apiKey' when calling processPreauthorize");
    }
    // verify the required parameter 'preauthorize' is set
    if (preauthorize == null) {
      throw new ApiException(400, "Missing the required parameter 'preauthorize' when calling processPreauthorize");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/transaction/{apiKey}/preauthorize"
        .replace("{apiKey}", ApiClient.urlEncode(apiKey.toString()));

    ApiRequestHeadersAuthentication authentication = ApiRequestAuthenticator.authenticate(memberVarApiUser);
    localVarRequestBuilder.header(HttpHeaders.authorization(), authentication.getAuthorizationHeader());

    URI localVarUri = URI.create(memberVarBaseUri + localVarPath);
    localVarRequestBuilder.uri(localVarUri);

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("User-Agent", "ixopay-java-sdk 3.0.0");

    byte[] localVarSignatureBody;
    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(preauthorize);
      localVarSignatureBody = localVarPostBody;
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }

    HttpRequestInfo localVarRequestInfo = ApiRequestSigner.requestInfo()
      .withUri(localVarUri)
      .withMethod("POST")
      .withContentTypeHeader("application/json")
      .withBody(localVarSignatureBody)
      .build();
    localVarRequestBuilder.header(HttpHeaders.date(), localVarRequestInfo.getNow());
    if(sharedSecret != null && localVarSignatureBody != null) {
      ApiRequestHeadersSignature signature = ApiRequestSigner.sign(sharedSecret, localVarRequestInfo);

      localVarRequestBuilder.header(HttpHeaders.xSignature(), signature.getXSignatureHeader());
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Process a refund
   * 
   * @param apiKey API Key of Connector (required)
   * @param refund Data which is required to process a refund (required)
   * @return MaybeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeTransactionResponse processRefund(String apiKey, Refund refund) throws ApiException {
    return  processRefund(null, apiKey, refund);
  }

  /**
   * Process a refund
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param refund Data which is required to process a refund (required)
   * @return MaybeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeTransactionResponse processRefund(@Nullable String sharedSecret, String apiKey, Refund refund) throws ApiException {
    ApiResponse<MaybeTransactionResponse> localVarResponse = processRefundWithHttpInfo(sharedSecret, apiKey, refund);
    return localVarResponse.getData();
  }

  /**
   * Process a refund
   * 
   * @param apiKey API Key of Connector (required)
   * @param refund Data which is required to process a refund (required)
   * @return ApiResponse&lt;MaybeTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeTransactionResponse> processRefundWithHttpInfo(String apiKey, Refund refund) throws ApiException {
    return processRefundWithHttpInfo(null, apiKey, refund);
  }

  /**
   * Process a refund
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param refund Data which is required to process a refund (required)
   * @return ApiResponse&lt;MaybeTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeTransactionResponse> processRefundWithHttpInfo(@Nullable String sharedSecret, String apiKey, Refund refund) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = processRefundRequestBuilder(sharedSecret, apiKey, refund);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        return new ApiResponse<MaybeTransactionResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MaybeTransactionResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder processRefundRequestBuilder(@Nullable String sharedSecret, String apiKey, Refund refund) throws ApiException {
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      throw new ApiException(400, "Missing the required parameter 'apiKey' when calling processRefund");
    }
    // verify the required parameter 'refund' is set
    if (refund == null) {
      throw new ApiException(400, "Missing the required parameter 'refund' when calling processRefund");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/transaction/{apiKey}/refund"
        .replace("{apiKey}", ApiClient.urlEncode(apiKey.toString()));

    ApiRequestHeadersAuthentication authentication = ApiRequestAuthenticator.authenticate(memberVarApiUser);
    localVarRequestBuilder.header(HttpHeaders.authorization(), authentication.getAuthorizationHeader());

    URI localVarUri = URI.create(memberVarBaseUri + localVarPath);
    localVarRequestBuilder.uri(localVarUri);

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("User-Agent", "ixopay-java-sdk 3.0.0");

    byte[] localVarSignatureBody;
    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(refund);
      localVarSignatureBody = localVarPostBody;
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }

    HttpRequestInfo localVarRequestInfo = ApiRequestSigner.requestInfo()
      .withUri(localVarUri)
      .withMethod("POST")
      .withContentTypeHeader("application/json")
      .withBody(localVarSignatureBody)
      .build();
    localVarRequestBuilder.header(HttpHeaders.date(), localVarRequestInfo.getNow());
    if(sharedSecret != null && localVarSignatureBody != null) {
      ApiRequestHeadersSignature signature = ApiRequestSigner.sign(sharedSecret, localVarRequestInfo);

      localVarRequestBuilder.header(HttpHeaders.xSignature(), signature.getXSignatureHeader());
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Process a register: registers a customer&#39;s payment instrument for future use (Debit or Preauthorize)
   * 
   * @param apiKey API Key of Connector (required)
   * @param register Data which is required to process a register (required)
   * @return MaybeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeTransactionResponse processRegister(String apiKey, Register register) throws ApiException {
    return  processRegister(null, apiKey, register);
  }

  /**
   * Process a register: registers a customer&#39;s payment instrument for future use (Debit or Preauthorize)
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param register Data which is required to process a register (required)
   * @return MaybeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeTransactionResponse processRegister(@Nullable String sharedSecret, String apiKey, Register register) throws ApiException {
    ApiResponse<MaybeTransactionResponse> localVarResponse = processRegisterWithHttpInfo(sharedSecret, apiKey, register);
    return localVarResponse.getData();
  }

  /**
   * Process a register: registers a customer&#39;s payment instrument for future use (Debit or Preauthorize)
   * 
   * @param apiKey API Key of Connector (required)
   * @param register Data which is required to process a register (required)
   * @return ApiResponse&lt;MaybeTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeTransactionResponse> processRegisterWithHttpInfo(String apiKey, Register register) throws ApiException {
    return processRegisterWithHttpInfo(null, apiKey, register);
  }

  /**
   * Process a register: registers a customer&#39;s payment instrument for future use (Debit or Preauthorize)
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param register Data which is required to process a register (required)
   * @return ApiResponse&lt;MaybeTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeTransactionResponse> processRegisterWithHttpInfo(@Nullable String sharedSecret, String apiKey, Register register) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = processRegisterRequestBuilder(sharedSecret, apiKey, register);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        return new ApiResponse<MaybeTransactionResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MaybeTransactionResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder processRegisterRequestBuilder(@Nullable String sharedSecret, String apiKey, Register register) throws ApiException {
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      throw new ApiException(400, "Missing the required parameter 'apiKey' when calling processRegister");
    }
    // verify the required parameter 'register' is set
    if (register == null) {
      throw new ApiException(400, "Missing the required parameter 'register' when calling processRegister");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/transaction/{apiKey}/register"
        .replace("{apiKey}", ApiClient.urlEncode(apiKey.toString()));

    ApiRequestHeadersAuthentication authentication = ApiRequestAuthenticator.authenticate(memberVarApiUser);
    localVarRequestBuilder.header(HttpHeaders.authorization(), authentication.getAuthorizationHeader());

    URI localVarUri = URI.create(memberVarBaseUri + localVarPath);
    localVarRequestBuilder.uri(localVarUri);

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("User-Agent", "ixopay-java-sdk 3.0.0");

    byte[] localVarSignatureBody;
    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(register);
      localVarSignatureBody = localVarPostBody;
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }

    HttpRequestInfo localVarRequestInfo = ApiRequestSigner.requestInfo()
      .withUri(localVarUri)
      .withMethod("POST")
      .withContentTypeHeader("application/json")
      .withBody(localVarSignatureBody)
      .build();
    localVarRequestBuilder.header(HttpHeaders.date(), localVarRequestInfo.getNow());
    if(sharedSecret != null && localVarSignatureBody != null) {
      ApiRequestHeadersSignature signature = ApiRequestSigner.sign(sharedSecret, localVarRequestInfo);

      localVarRequestBuilder.header(HttpHeaders.xSignature(), signature.getXSignatureHeader());
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Process a void: cancels a previously authorized Preauthorize
   * 
   * @param apiKey API Key of Connector (required)
   * @param modelVoid Data which is required to process a void (required)
   * @return MaybeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeTransactionResponse processVoid(String apiKey, ModelVoid modelVoid) throws ApiException {
    return  processVoid(null, apiKey, modelVoid);
  }

  /**
   * Process a void: cancels a previously authorized Preauthorize
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param modelVoid Data which is required to process a void (required)
   * @return MaybeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MaybeTransactionResponse processVoid(@Nullable String sharedSecret, String apiKey, ModelVoid modelVoid) throws ApiException {
    ApiResponse<MaybeTransactionResponse> localVarResponse = processVoidWithHttpInfo(sharedSecret, apiKey, modelVoid);
    return localVarResponse.getData();
  }

  /**
   * Process a void: cancels a previously authorized Preauthorize
   * 
   * @param apiKey API Key of Connector (required)
   * @param modelVoid Data which is required to process a void (required)
   * @return ApiResponse&lt;MaybeTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeTransactionResponse> processVoidWithHttpInfo(String apiKey, ModelVoid modelVoid) throws ApiException {
    return processVoidWithHttpInfo(null, apiKey, modelVoid);
  }

  /**
   * Process a void: cancels a previously authorized Preauthorize
   * 
   * @param sharedSecret optional shared secret for signing requests (can be {@code null}).
   * @param apiKey API Key of Connector (required)
   * @param modelVoid Data which is required to process a void (required)
   * @return ApiResponse&lt;MaybeTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MaybeTransactionResponse> processVoidWithHttpInfo(@Nullable String sharedSecret, String apiKey, ModelVoid modelVoid) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = processVoidRequestBuilder(sharedSecret, apiKey, modelVoid);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        return new ApiResponse<MaybeTransactionResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MaybeTransactionResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder processVoidRequestBuilder(@Nullable String sharedSecret, String apiKey, ModelVoid modelVoid) throws ApiException {
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      throw new ApiException(400, "Missing the required parameter 'apiKey' when calling processVoid");
    }
    // verify the required parameter 'modelVoid' is set
    if (modelVoid == null) {
      throw new ApiException(400, "Missing the required parameter 'modelVoid' when calling processVoid");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/transaction/{apiKey}/void"
        .replace("{apiKey}", ApiClient.urlEncode(apiKey.toString()));

    ApiRequestHeadersAuthentication authentication = ApiRequestAuthenticator.authenticate(memberVarApiUser);
    localVarRequestBuilder.header(HttpHeaders.authorization(), authentication.getAuthorizationHeader());

    URI localVarUri = URI.create(memberVarBaseUri + localVarPath);
    localVarRequestBuilder.uri(localVarUri);

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("User-Agent", "ixopay-java-sdk 3.0.0");

    byte[] localVarSignatureBody;
    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(modelVoid);
      localVarSignatureBody = localVarPostBody;
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }

    HttpRequestInfo localVarRequestInfo = ApiRequestSigner.requestInfo()
      .withUri(localVarUri)
      .withMethod("POST")
      .withContentTypeHeader("application/json")
      .withBody(localVarSignatureBody)
      .build();
    localVarRequestBuilder.header(HttpHeaders.date(), localVarRequestInfo.getNow());
    if(sharedSecret != null && localVarSignatureBody != null) {
      ApiRequestHeadersSignature signature = ApiRequestSigner.sign(sharedSecret, localVarRequestInfo);

      localVarRequestBuilder.header(HttpHeaders.xSignature(), signature.getXSignatureHeader());
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
